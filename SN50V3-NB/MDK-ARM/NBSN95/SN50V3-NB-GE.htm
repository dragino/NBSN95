<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [NBSN95\SN50V3-NB-GE.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image NBSN95\SN50V3-NB-GE.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Sep 02 11:48:51 2024
<BR><P>
<H3>Maximum Stack Usage =        752 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; user_key_event &rArr; NBTASK &rArr; nb_MQTT_pub1_run &rArr; nb_MQTT_pub1_set &rArr; pro_data_thingspeak &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from stm32l0xx_it.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from stm32l0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1c]">I2C1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1d]">I2C2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1a]">I2C3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[13]">LPTIM1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2b]">OnCheckBLETimesEvent</a> from main.o(i.OnCheckBLETimesEvent) referenced from main.o(i.LoraStartCheckBLE)
 <LI><a href="#[36]">OnPressButtonTimeoutEvent</a> from main.o(i.OnPressButtonTimeoutEvent) referenced from main.o(i.user_key_event)
 <LI><a href="#[33]">OnPressButtonTimesLedEvent</a> from main.o(i.OnPressButtonTimesLedEvent) referenced from main.o(i.main)
 <LI><a href="#[33]">OnPressButtonTimesLedEvent</a> from main.o(i.OnPressButtonTimesLedEvent) referenced from main.o(i.user_key_event)
 <LI><a href="#[2c]">OnTxTimerEvent</a> from main.o(i.OnTxTimerEvent) referenced 3 times from nbinit.o(i.NBTASK)
 <LI><a href="#[35]">OntimesampleEvent</a> from main.o(i.OntimesampleEvent) referenced from nbinit.o(i.nb_cclk2_get)
 <LI><a href="#[35]">OntimesampleEvent</a> from main.o(i.OntimesampleEvent) referenced from nbinit.o(i.nb_cclk_get)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32l0xx_it.o(i.PendSV_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[22]">RNG_LPUART1_IRQHandler</a> from stm32l0xx_it.o(i.RNG_LPUART1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from stm32l0xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1e]">SPI1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1f]">SPI2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32l0xx_it.o(i.SVC_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[34]">SystemClock_Config</a> from main.o(i.SystemClock_Config) referenced from main.o(i.main)
 <LI><a href="#[25]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l072xx.o(.text)
 <LI><a href="#[19]">TIM21_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1b]">TIM22_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[17]">TIM6_DAC_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[18]">TIM7_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[e]">TSC_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[27]">UART_DMAAbortOnError</a> from stm32l0xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[2a]">UART_DMAError</a> from stm32l0xx_hal_uart.o(i.UART_DMAError) referenced from stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[28]">UART_DMATransmitCplt</a> from stm32l0xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[29]">UART_DMATxHalfCplt</a> from stm32l0xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[2f]">UART_RxISR_16BIT</a> from stm32l0xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32l0xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[2e]">UART_RxISR_8BIT</a> from stm32l0xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32l0xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[20]">USART1_IRQHandler</a> from stm32l0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[21]">USART2_IRQHandler</a> from stm32l0xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[14]">USART4_5_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[23]">USB_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[26]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l072xx.o(.text)
 <LI><a href="#[31]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[55]">at_5vt_get</a> from at.o(i.at_5vt_get) referenced from at.o(.constdata)
 <LI><a href="#[56]">at_5vt_set</a> from at.o(i.at_5vt_set) referenced from at.o(.constdata)
 <LI><a href="#[53]">at_apn_get</a> from at.o(i.at_apn_get) referenced from at.o(.constdata)
 <LI><a href="#[54]">at_apn_set</a> from at.o(i.at_apn_set) referenced from at.o(.constdata)
 <LI><a href="#[62]">at_cdp_run</a> from at.o(i.at_cdp_run) referenced from at.o(.constdata)
 <LI><a href="#[61]">at_cdp_set</a> from at.o(i.at_cdp_set) referenced from at.o(.constdata)
 <LI><a href="#[42]">at_cfg_run</a> from at.o(i.at_cfg_run) referenced from at.o(.constdata)
 <LI><a href="#[45]">at_client_get</a> from at.o(i.at_client_get) referenced from at.o(.constdata)
 <LI><a href="#[46]">at_client_set</a> from at.o(i.at_client_set) referenced from at.o(.constdata)
 <LI><a href="#[73]">at_clocklog_get</a> from at.o(i.at_clocklog_get) referenced from at.o(.constdata)
 <LI><a href="#[74]">at_clocklog_set</a> from at.o(i.at_clocklog_set) referenced from at.o(.constdata)
 <LI><a href="#[67]">at_csqtime_get</a> from at.o(i.at_csqtime_get) referenced from at.o(.constdata)
 <LI><a href="#[68]">at_csqtime_set</a> from at.o(i.at_csqtime_set) referenced from at.o(.constdata)
 <LI><a href="#[3c]">at_deui_get</a> from at.o(i.at_deui_get) referenced from at.o(.constdata)
 <LI><a href="#[3d]">at_deui_set</a> from at.o(i.at_deui_set) referenced from at.o(.constdata)
 <LI><a href="#[65]">at_dnscfg_get</a> from at.o(i.at_dnscfg_get) referenced from at.o(.constdata)
 <LI><a href="#[66]">at_dnscfg_set</a> from at.o(i.at_dnscfg_set) referenced from at.o(.constdata)
 <LI><a href="#[69]">at_dnstimer_get</a> from at.o(i.at_dnstimer_get) referenced from at.o(.constdata)
 <LI><a href="#[6a]">at_dnstimer_set</a> from at.o(i.at_dnstimer_set) referenced from at.o(.constdata)
 <LI><a href="#[5f]">at_ext_get</a> from at.o(i.at_ext_get) referenced from at.o(.constdata)
 <LI><a href="#[60]">at_ext_set</a> from at.o(i.at_ext_set) referenced from at.o(.constdata)
 <LI><a href="#[40]">at_fdr1_run</a> from at.o(i.at_fdr1_run) referenced from at.o(.constdata)
 <LI><a href="#[41]">at_fdr_run</a> from at.o(i.at_fdr_run) referenced from at.o(.constdata)
 <LI><a href="#[72]">at_getlog_run</a> from at.o(i.at_getlog_run) referenced from at.o(.constdata)
 <LI><a href="#[71]">at_getlog_set</a> from at.o(i.at_getlog_set) referenced from at.o(.constdata)
 <LI><a href="#[64]">at_getsensorvalue_set</a> from at.o(i.at_getsensorvalue_set) referenced from at.o(.constdata)
 <LI><a href="#[51]">at_inmod_get</a> from at.o(i.at_inmod_get) referenced from at.o(.constdata)
 <LI><a href="#[52]">at_inmod_set</a> from at.o(i.at_inmod_set) referenced from at.o(.constdata)
 <LI><a href="#[63]">at_ldata_get</a> from at.o(i.at_ldata_get) referenced from at.o(.constdata)
 <LI><a href="#[3a]">at_mod_get</a> from at.o(i.at_mod_get) referenced from at.o(.constdata)
 <LI><a href="#[3b]">at_mod_set</a> from at.o(i.at_mod_set) referenced from at.o(.constdata)
 <LI><a href="#[37]">at_model_get</a> from at.o(i.at_model_get) referenced from at.o(.constdata)
 <LI><a href="#[6f]">at_mqos_get</a> from at.o(i.at_mqos_get) referenced from at.o(.constdata)
 <LI><a href="#[70]">at_mqos_set</a> from at.o(i.at_mqos_set) referenced from at.o(.constdata)
 <LI><a href="#[57]">at_pro_get</a> from at.o(i.at_pro_get) referenced from at.o(.constdata)
 <LI><a href="#[58]">at_pro_set</a> from at.o(i.at_pro_set) referenced from at.o(.constdata)
 <LI><a href="#[4b]">at_pubtopic_get</a> from at.o(i.at_pubtopic_get) referenced from at.o(.constdata)
 <LI><a href="#[4c]">at_pubtopic_set</a> from at.o(i.at_pubtopic_set) referenced from at.o(.constdata)
 <LI><a href="#[49]">at_pwd_get</a> from at.o(i.at_pwd_get) referenced from at.o(.constdata)
 <LI><a href="#[4a]">at_pwd_set</a> from at.o(i.at_pwd_set) referenced from at.o(.constdata)
 <LI><a href="#[3e]">at_pword_get</a> from at.o(i.at_pword_get) referenced from at.o(.constdata)
 <LI><a href="#[3f]">at_pword_set</a> from at.o(i.at_pword_set) referenced from at.o(.constdata)
 <LI><a href="#[39]">at_reset_run</a> from at.o(i.at_reset_run) referenced from at.o(.constdata)
 <LI><a href="#[38]">at_return_error</a> from at.o(i.at_return_error) referenced 45 times from at.o(.constdata)
 <LI><a href="#[59]">at_rxdl_get</a> from at.o(i.at_rxdl_get) referenced from at.o(.constdata)
 <LI><a href="#[5a]">at_rxdl_set</a> from at.o(i.at_rxdl_set) referenced from at.o(.constdata)
 <LI><a href="#[43]">at_servaddr_get</a> from at.o(i.at_servaddr_get) referenced from at.o(.constdata)
 <LI><a href="#[44]">at_servaddr_set</a> from at.o(i.at_servaddr_set) referenced from at.o(.constdata)
 <LI><a href="#[6d]">at_sleep_get</a> from at.o(i.at_sleep_get) referenced from at.o(.constdata)
 <LI><a href="#[6e]">at_sleep_set</a> from at.o(i.at_sleep_set) referenced from at.o(.constdata)
 <LI><a href="#[4d]">at_subtopic_get</a> from at.o(i.at_subtopic_get) referenced from at.o(.constdata)
 <LI><a href="#[4e]">at_subtopic_set</a> from at.o(i.at_subtopic_set) referenced from at.o(.constdata)
 <LI><a href="#[4f]">at_tdc_get</a> from at.o(i.at_tdc_get) referenced from at.o(.constdata)
 <LI><a href="#[50]">at_tdc_set</a> from at.o(i.at_tdc_set) referenced from at.o(.constdata)
 <LI><a href="#[6b]">at_tlsmod_get</a> from at.o(i.at_tlsmod_get) referenced from at.o(.constdata)
 <LI><a href="#[6c]">at_tlsmod_set</a> from at.o(i.at_tlsmod_set) referenced from at.o(.constdata)
 <LI><a href="#[47]">at_uname_get</a> from at.o(i.at_uname_get) referenced from at.o(.constdata)
 <LI><a href="#[48]">at_uname_set</a> from at.o(i.at_uname_set) referenced from at.o(.constdata)
 <LI><a href="#[75]">at_uri1_get</a> from at.o(i.at_uri1_get) referenced from at.o(.constdata)
 <LI><a href="#[76]">at_uri1_set</a> from at.o(i.at_uri1_set) referenced from at.o(.constdata)
 <LI><a href="#[77]">at_uri2_get</a> from at.o(i.at_uri2_get) referenced from at.o(.constdata)
 <LI><a href="#[78]">at_uri2_set</a> from at.o(i.at_uri2_set) referenced from at.o(.constdata)
 <LI><a href="#[79]">at_uri3_get</a> from at.o(i.at_uri3_get) referenced from at.o(.constdata)
 <LI><a href="#[7a]">at_uri3_set</a> from at.o(i.at_uri3_set) referenced from at.o(.constdata)
 <LI><a href="#[7b]">at_uri4_get</a> from at.o(i.at_uri4_get) referenced from at.o(.constdata)
 <LI><a href="#[7c]">at_uri4_set</a> from at.o(i.at_uri4_set) referenced from at.o(.constdata)
 <LI><a href="#[5b]">at_weight_GapValue_get</a> from at.o(i.at_weight_GapValue_get) referenced from at.o(.constdata)
 <LI><a href="#[5c]">at_weight_GapValue_set</a> from at.o(i.at_weight_GapValue_set) referenced from at.o(.constdata)
 <LI><a href="#[5d]">at_weight_get</a> from at.o(i.at_weight_get) referenced from at.o(.constdata)
 <LI><a href="#[5e]">at_weight_reset</a> from at.o(i.at_weight_reset) referenced from at.o(.constdata)
 <LI><a href="#[30]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[24]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[c0]">nb_COAP_close_run</a> from nb_coap.o(i.nb_COAP_close_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[c1]">nb_COAP_close_set</a> from nb_coap.o(i.nb_COAP_close_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[ab]">nb_COAP_config_set</a> from nb_coap.o(i.nb_COAP_config_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[ae]">nb_COAP_head_run</a> from nb_coap.o(i.nb_COAP_head_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[af]">nb_COAP_head_set</a> from nb_coap.o(i.nb_COAP_head_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[ac]">nb_COAP_open_run</a> from nb_coap.o(i.nb_COAP_open_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[ad]">nb_COAP_open_set</a> from nb_coap.o(i.nb_COAP_open_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[b0]">nb_COAP_option1_run</a> from nb_coap.o(i.nb_COAP_option1_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[b1]">nb_COAP_option1_set</a> from nb_coap.o(i.nb_COAP_option1_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[b2]">nb_COAP_option2_run</a> from nb_coap.o(i.nb_COAP_option2_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[b3]">nb_COAP_option2_set</a> from nb_coap.o(i.nb_COAP_option2_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[b4]">nb_COAP_option3_run</a> from nb_coap.o(i.nb_COAP_option3_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[b5]">nb_COAP_option3_set</a> from nb_coap.o(i.nb_COAP_option3_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[b6]">nb_COAP_option4_run</a> from nb_coap.o(i.nb_COAP_option4_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[b7]">nb_COAP_option4_set</a> from nb_coap.o(i.nb_COAP_option4_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[bf]">nb_COAP_read_get</a> from nb_coap.o(i.nb_COAP_read_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[be]">nb_COAP_read_run</a> from nb_coap.o(i.nb_COAP_read_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[b8]">nb_COAP_send_config_run</a> from nb_coap.o(i.nb_COAP_send_config_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[b9]">nb_COAP_send_config_set</a> from nb_coap.o(i.nb_COAP_send_config_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[bc]">nb_COAP_send_hex_run</a> from nb_coap.o(i.nb_COAP_send_hex_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[bd]">nb_COAP_send_hex_set</a> from nb_coap.o(i.nb_COAP_send_hex_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[ba]">nb_COAP_send_run</a> from nb_coap.o(i.nb_COAP_send_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[bb]">nb_COAP_send_set</a> from nb_coap.o(i.nb_COAP_send_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[c2]">nb_COAP_uri_run</a> from nb_coap.o(i.nb_COAP_uri_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[e5]">nb_MQTT_close_run</a> from nb_mqtt.o(i.nb_MQTT_close_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[e6]">nb_MQTT_close_set</a> from nb_mqtt.o(i.nb_MQTT_close_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[d0]">nb_MQTT_config_set</a> from nb_mqtt.o(i.nb_MQTT_config_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[d3]">nb_MQTT_conn_run</a> from nb_mqtt.o(i.nb_MQTT_conn_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[d4]">nb_MQTT_conn_set</a> from nb_mqtt.o(i.nb_MQTT_conn_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[e3]">nb_MQTT_data_read_run</a> from nb_mqtt.o(i.nb_MQTT_data_read_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[e4]">nb_MQTT_data_read_set</a> from nb_mqtt.o(i.nb_MQTT_data_read_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[d1]">nb_MQTT_open_run</a> from nb_mqtt.o(i.nb_MQTT_open_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[d2]">nb_MQTT_open_set</a> from nb_mqtt.o(i.nb_MQTT_open_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[d9]">nb_MQTT_pub1_run</a> from nb_mqtt.o(i.nb_MQTT_pub1_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[da]">nb_MQTT_pub1_set</a> from nb_mqtt.o(i.nb_MQTT_pub1_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[db]">nb_MQTT_pub2_run</a> from nb_mqtt.o(i.nb_MQTT_pub2_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[dc]">nb_MQTT_pub2_set</a> from nb_mqtt.o(i.nb_MQTT_pub2_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[dd]">nb_MQTT_pub3_run</a> from nb_mqtt.o(i.nb_MQTT_pub3_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[de]">nb_MQTT_pub3_set</a> from nb_mqtt.o(i.nb_MQTT_pub3_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[df]">nb_MQTT_pub5_run</a> from nb_mqtt.o(i.nb_MQTT_pub5_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[e0]">nb_MQTT_pub5_set</a> from nb_mqtt.o(i.nb_MQTT_pub5_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[d7]">nb_MQTT_pub_run</a> from nb_mqtt.o(i.nb_MQTT_pub_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[d8]">nb_MQTT_pub_set</a> from nb_mqtt.o(i.nb_MQTT_pub_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[e1]">nb_MQTT_send_run</a> from nb_mqtt.o(i.nb_MQTT_send_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[e2]">nb_MQTT_send_set</a> from nb_mqtt.o(i.nb_MQTT_send_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[d5]">nb_MQTT_sub_run</a> from nb_mqtt.o(i.nb_MQTT_sub_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[d6]">nb_MQTT_sub_set</a> from nb_mqtt.o(i.nb_MQTT_sub_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[e7]">nb_MQTT_uri_run</a> from nb_mqtt.o(i.nb_MQTT_uri_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[ce]">nb_QMTCFGSSL_run</a> from nb_mqtt.o(i.nb_QMTCFGSSL_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[cf]">nb_QMTCFGSSL_set</a> from nb_mqtt.o(i.nb_QMTCFGSSL_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[cc]">nb_QSSLCFG_run</a> from nb_mqtt.o(i.nb_QSSLCFG_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[cd]">nb_QSSLCFG_set</a> from nb_mqtt.o(i.nb_QSSLCFG_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[ee]">nb_TCP_close_run</a> from nb_tcp.o(i.nb_TCP_close_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[ef]">nb_TCP_close_set</a> from nb_tcp.o(i.nb_TCP_close_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[e8]">nb_TCP_open_run</a> from nb_tcp.o(i.nb_TCP_open_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[e9]">nb_TCP_open_set</a> from nb_tcp.o(i.nb_TCP_open_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[ed]">nb_TCP_read_get</a> from nb_tcp.o(i.nb_TCP_read_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[ec]">nb_TCP_read_run</a> from nb_tcp.o(i.nb_TCP_read_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[ea]">nb_TCP_send_run</a> from nb_tcp.o(i.nb_TCP_send_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[eb]">nb_TCP_send_set</a> from nb_tcp.o(i.nb_TCP_send_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[f0]">nb_TCP_uri_run</a> from nb_tcp.o(i.nb_TCP_uri_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[c9]">nb_UDP_close_run</a> from nb_udp.o(i.nb_UDP_close_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[ca]">nb_UDP_close_set</a> from nb_udp.o(i.nb_UDP_close_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[c3]">nb_UDP_open_run</a> from nb_udp.o(i.nb_UDP_open_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[c4]">nb_UDP_open_set</a> from nb_udp.o(i.nb_UDP_open_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[c8]">nb_UDP_read_get</a> from nb_udp.o(i.nb_UDP_read_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[c7]">nb_UDP_read_run</a> from nb_udp.o(i.nb_UDP_read_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[c5]">nb_UDP_send_run</a> from nb_udp.o(i.nb_UDP_send_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[c6]">nb_UDP_send_set</a> from nb_udp.o(i.nb_UDP_send_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[cb]">nb_UDP_uri_run</a> from nb_udp.o(i.nb_UDP_uri_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[7d]">nb_at_run</a> from nbinit.o(i.nb_at_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[7f]">nb_ate_run</a> from nbinit.o(i.nb_ate_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[9e]">nb_cclk2_get</a> from nbinit.o(i.nb_cclk2_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[9d]">nb_cclk2_run</a> from nbinit.o(i.nb_cclk2_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[9c]">nb_cclk_get</a> from nbinit.o(i.nb_cclk_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[9b]">nb_cclk_run</a> from nbinit.o(i.nb_cclk_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[8f]">nb_cfun_get</a> from nbinit.o(i.nb_cfun_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[8d]">nb_cfun_run</a> from nbinit.o(i.nb_cfun_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[8e]">nb_cfun_set</a> from nbinit.o(i.nb_cfun_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[8c]">nb_cfunoff_get</a> from nbinit.o(i.nb_cfunoff_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[8a]">nb_cfunoff_run</a> from nbinit.o(i.nb_cfunoff_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[8b]">nb_cfunoff_set</a> from nbinit.o(i.nb_cfunoff_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[89]">nb_cfunsta_get</a> from nbinit.o(i.nb_cfunsta_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[87]">nb_cfunsta_run</a> from nbinit.o(i.nb_cfunsta_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[88]">nb_cfunsta_set</a> from nbinit.o(i.nb_cfunsta_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[a1]">nb_cgdcont_get</a> from nbinit.o(i.nb_cgdcont_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[9f]">nb_cgdcont_run</a> from nbinit.o(i.nb_cgdcont_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[a0]">nb_cgdcont_set</a> from nbinit.o(i.nb_cgdcont_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[9a]">nb_cgmm_get</a> from nbinit.o(i.nb_cgmm_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[99]">nb_cgmm_run</a> from nbinit.o(i.nb_cgmm_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[82]">nb_cgsn_get</a> from nbinit.o(i.nb_cgsn_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[83]">nb_cimi_get</a> from nbinit.o(i.nb_cimi_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[a4]">nb_cpsms_get</a> from nbinit.o(i.nb_cpsms_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[a2]">nb_cpsms_run</a> from nbinit.o(i.nb_cpsms_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[a3]">nb_cpsms_set</a> from nbinit.o(i.nb_cpsms_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[a5]">nb_csq_get</a> from nbinit.o(i.nb_csq_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[2d]">nb_intTimeoutEvent</a> from main.o(i.nb_intTimeoutEvent) referenced from nbinit.o(i.NBTASK)
 <LI><a href="#[7e]">nb_null_run</a> from nbinit.o(i.nb_null_run) referenced 315 times from nbinit.o(.constdata)
 <LI><a href="#[98]">nb_qband_get</a> from nbinit.o(i.nb_qband_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[96]">nb_qband_run</a> from nbinit.o(i.nb_qband_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[97]">nb_qband_set</a> from nbinit.o(i.nb_qband_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[80]">nb_qcfgev_run</a> from nbinit.o(i.nb_qcfgev_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[81]">nb_qcfgev_set</a> from nbinit.o(i.nb_qcfgev_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[aa]">nb_qdns_get</a> from nbinit.o(i.nb_qdns_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[a8]">nb_qdns_run</a> from nbinit.o(i.nb_qdns_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[a9]">nb_qdns_set</a> from nbinit.o(i.nb_qdns_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[a6]">nb_qdnscfg_run</a> from nbinit.o(i.nb_qdnscfg_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[a7]">nb_qdnscfg_set</a> from nbinit.o(i.nb_qdnscfg_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[86]">nb_qicfg_get</a> from nbinit.o(i.nb_qicfg_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[84]">nb_qicfg_run</a> from nbinit.o(i.nb_qicfg_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[85]">nb_qicfg_set</a> from nbinit.o(i.nb_qicfg_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[f2]">nb_qrst2_run</a> from nbinit.o(i.nb_qrst2_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[f1]">nb_qrst_run</a> from nbinit.o(i.nb_qrst_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[92]">nb_qsclk_get</a> from nbinit.o(i.nb_qsclk_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[90]">nb_qsclk_run</a> from nbinit.o(i.nb_qsclk_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[91]">nb_qsclk_set</a> from nbinit.o(i.nb_qsclk_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[95]">nb_qsclkoff_get</a> from nbinit.o(i.nb_qsclkoff_get) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[93]">nb_qsclkoff_run</a> from nbinit.o(i.nb_qsclkoff_run) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[94]">nb_qsclkoff_set</a> from nbinit.o(i.nb_qsclkoff_set) referenced 5 times from nbinit.o(.constdata)
 <LI><a href="#[32]">onCalibrationtimeEvent</a> from main.o(i.onCalibrationtimeEvent) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[24c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[f3]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[24d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[24e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[24f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[250]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[251]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>USART4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[252]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AlarmInit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_distance
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVoltage
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>

<P><STRONG><a name="[253]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVoltage
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCModel
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vfscanf
</UL>

<P><STRONG><a name="[254]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexDetection
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1f9]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
</UL>

<P><STRONG><a name="[fb]"></a>mktime</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mktime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>

<P><STRONG><a name="[ff]"></a>strftime</STRONG> (Thumb, 592 bytes, Stack size 72 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = strftime &rArr; _isoweek &rArr; _yeardays &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[101]"></a>asctime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, asctime_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = asctime &rArr; strftime &rArr; _isoweek &rArr; _yeardays &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[102]"></a>ctime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ctime &rArr; asctime &rArr; strftime &rArr; _isoweek &rArr; _yeardays &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_get
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_get
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_send_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_read_get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_open_set
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_read_get
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_open_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_open_set
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_data_read_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_read_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_open_set
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Get
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv6_addr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv4_addr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri4_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri3_set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri2_set
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri1_set
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uname_set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_subtopic_set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_servaddr_set
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pword_set
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwd_set
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pubtopic_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_dnscfg_set
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deui_set
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_apn_set
</UL>

<P><STRONG><a name="[1ce]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[255]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[256]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclkoff_set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclk_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qicfg_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdnscfg_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qcfgev_set
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qband_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cpsms_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgdcont_set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunsta_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunoff_set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfun_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_send_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_read_get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_open_set
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_send_set
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_read_get
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_open_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QSSLCFG_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QMTCFGSSL_set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_sub_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub5_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub3_set
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub2_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub1_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_open_set
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_data_read_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_conn_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_hex_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_config_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_read_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option4_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option3_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option2_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option1_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_open_set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_head_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_close_set
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_Rest
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatalogPrint
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri4_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri3_set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri2_set
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri1_set
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uname_set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_subtopic_set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_servaddr_set
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pword_set
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwd_set
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pubtopic_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_dnscfg_set
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deui_set
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_apn_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_GPIO_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_GPIO_DeInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cimi_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgsn_get
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AlarmInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa0
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_ble
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BLE_STATUS_Ioinit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_IoDeInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_GPIO_MODE_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_DeInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_DeInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv6_addr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv4_addr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_DeInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_DeInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Set
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr1_run
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stored_datalog
</UL>

<P><STRONG><a name="[258]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1bb]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclkoff_set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclk_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qicfg_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdnscfg_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qcfgev_set
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qband_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cpsms_set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunsta_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunoff_set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfun_set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_get
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_send_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_open_set
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_send_set
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_open_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QSSLCFG_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QMTCFGSSL_set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_sub_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub5_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub3_set
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub2_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub1_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_open_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_conn_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_hex_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_config_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option4_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option3_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option2_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option1_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_open_set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_head_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_close_set
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetUniqueId
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
</UL>

<P><STRONG><a name="[12a]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cimi_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgsn_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgmm_get
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_get
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_uri_run
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_uri_run
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_uri_run
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_data_read_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_conn_set
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_uri_run
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATInsPro
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv6_addr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv4_addr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_servaddr_get
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>

<P><STRONG><a name="[245]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cimi_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgsn_get
</UL>

<P><STRONG><a name="[223]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qband_get
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_csq_get
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cimi_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgsn_get
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_send_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_open_set
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_open_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_open_set
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_data_read_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_open_set
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_set
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri4_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri3_set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri2_set
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri1_set
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uname_set
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tlsmod_set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tdc_set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_subtopic_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sleep_set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_servaddr_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rxdl_set
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pword_set
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwd_set
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pubtopic_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pro_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mqos_set
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mod_set
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_inmod_set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getsensorvalue_set
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getlog_set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ext_set
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_dnstimer_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_dnscfg_set
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deui_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_csqtime_set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_clocklog_set
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cdp_set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_apn_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_5vt_set
</UL>

<P><STRONG><a name="[1ee]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtrim
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclkoff_set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclk_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qicfg_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdnscfg_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qcfgev_set
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qband_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_csq_get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cpsms_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgdcont_set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunsta_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunoff_set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfun_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_send_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_open_set
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_send_set
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_open_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QSSLCFG_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QMTCFGSSL_set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_sub_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub5_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub3_set
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub2_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub1_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_open_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_conn_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_hex_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_config_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option4_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option3_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option2_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option1_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_open_set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_head_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_close_set
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Get
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vfscanf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_data
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31LowPower
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv6_addr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv4_addr
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexDetection
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Set
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri4_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri3_set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri2_set
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri1_set
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uname_set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_subtopic_set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_servaddr_set
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_servaddr_get
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pword_set
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwd_set
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pubtopic_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ldata_get
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_inmod_set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ext_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_dnscfg_set
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deui_set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_clocklog_set
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_apn_set
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stored_datalog
</UL>

<P><STRONG><a name="[129]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATInsPro
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
</UL>

<P><STRONG><a name="[238]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_get
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_csq_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_read_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_read_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_read_get
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv6_addr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv4_addr
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Set
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pword_set
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stored_datalog
</UL>

<P><STRONG><a name="[259]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_csq_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_touint
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_set
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tlsmod_set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tdc_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sleep_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rxdl_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pro_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mqos_set
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mod_set
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_dnstimer_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_csqtime_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_5vt_set
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataWrite
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tmp117_temp
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Set
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_set
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Get
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataPrint
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_set
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[148]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp117_connect
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tmp117_temp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
</UL>

<P><STRONG><a name="[25b]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCModel
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_get
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp117_connect
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tmp117_temp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataPrint
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Get
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_set
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataWrite
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tmp117_temp
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Set
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCModel
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_data
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tmp117_temp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCModel
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_get
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp117_connect
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tmp117_temp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_set
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[25c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[25d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[25e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>localtime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = localtime &rArr; _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[fc]"></a>_localtime</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[109]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[25f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[115]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[10f]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[10e]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f4]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[260]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[11e]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[261]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>ADCModel</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, battery_read.o(i.ADCModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ADCModel &rArr; HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[127]"></a>ATInsPro</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, at.o(i.ATInsPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ATInsPro &rArr; config_Set &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtrim
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Set
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_que
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
</UL>

<P><STRONG><a name="[12d]"></a>BSP_sensor_Init</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, common.o(i.BSP_sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BSP_sensor_Init &rArr; waitbusy &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitbusy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp117_connect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_Detect
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_Detect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_Connection_Test
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_GPIO_MODE_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_DeInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_DeInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_DeInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_DeInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Maopi
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel2_3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>DS18B20_GetTemp_SkipRom</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ds18b20.o(i.DS18B20_GetTemp_SkipRom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DS18B20_GetTemp_SkipRom &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SkipRom
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadByte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[144]"></a>DS18B20_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DS18B20_Init &rArr; DS18B20_Presence &rArr; DS18B20_Mode_IPU &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Presence
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_Out_PP
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
</UL>

<P><STRONG><a name="[14c]"></a>DS18B20_IoDeInit</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ds18b20.o(i.DS18B20_IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DS18B20_IoDeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[14e]"></a>DS18B20_Mode_IPU</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, ds18b20.o(i.DS18B20_Mode_IPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DS18B20_Mode_IPU &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Presence
</UL>

<P><STRONG><a name="[149]"></a>DS18B20_Mode_Out_PP</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ds18b20.o(i.DS18B20_Mode_Out_PP))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DS18B20_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
</UL>

<P><STRONG><a name="[14b]"></a>DS18B20_Presence</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Presence))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DS18B20_Presence &rArr; DS18B20_Mode_IPU &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_delay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_IPU
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SkipRom
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
</UL>

<P><STRONG><a name="[150]"></a>DS18B20_ReadBit</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_ReadBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DS18B20_ReadBit &rArr; DS18B20_Mode_IPU &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_delay
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_Out_PP
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_IPU
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadByte
</UL>

<P><STRONG><a name="[147]"></a>DS18B20_ReadByte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DS18B20_ReadByte &rArr; DS18B20_ReadBit &rArr; DS18B20_Mode_IPU &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
</UL>

<P><STRONG><a name="[14a]"></a>DS18B20_Rst</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DS18B20_Rst &rArr; DS18B20_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_delay
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_Out_PP
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SkipRom
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
</UL>

<P><STRONG><a name="[145]"></a>DS18B20_SkipRom</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_SkipRom))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DS18B20_SkipRom &rArr; DS18B20_Presence &rArr; DS18B20_Mode_IPU &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Presence
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
</UL>

<P><STRONG><a name="[146]"></a>DS18B20_WriteByte</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, ds18b20.o(i.DS18B20_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DS18B20_WriteByte &rArr; DS18B20_Mode_Out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_delay
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_Out_PP
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SkipRom
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
</UL>

<P><STRONG><a name="[14f]"></a>DS18B20_delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ds18b20.o(i.DS18B20_delay))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Presence
</UL>

<P><STRONG><a name="[151]"></a>DatalogClear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, common.o(i.DatalogClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DatalogClear &rArr; FLASH_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getlog_set
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr1_run
</UL>

<P><STRONG><a name="[153]"></a>DatalogPrint</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, common.o(i.DatalogPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DatalogPrint &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getlog_run
</UL>

<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI0_1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[156]"></a>EX_GPIO_Init</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, common.o(i.EX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Get
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_inmod_set
</UL>

<P><STRONG><a name="[15a]"></a>EX_GPIO_Init_pa0</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, common.o(i.EX_GPIO_Init_pa0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EX_GPIO_Init_pa0 &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Get
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_inmod_set
</UL>

<P><STRONG><a name="[15b]"></a>EX_GPIO_Init_pa4</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, common.o(i.EX_GPIO_Init_pa4))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EX_GPIO_Init_pa4 &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Get
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_inmod_set
</UL>

<P><STRONG><a name="[19e]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AlarmInit
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[175]"></a>FLASH_PageErase</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l0xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[15c]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32l0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Erase
</UL>

<P><STRONG><a name="[152]"></a>FLASH_erase</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, flash_eraseprogram.o(i.FLASH_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FLASH_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatalogClear
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Set
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pword_set
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr1_run
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stored_datalog
</UL>

<P><STRONG><a name="[161]"></a>FLASH_program</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, flash_eraseprogram.o(i.FLASH_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetError
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Set
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pword_set
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr1_run
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stored_datalog
</UL>

<P><STRONG><a name="[154]"></a>FLASH_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flash_eraseprogram.o(i.FLASH_read))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Get
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatalogPrint
</UL>

<P><STRONG><a name="[164]"></a>GPIO_BLE_STATUS_Ioinit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, main.o(i.GPIO_BLE_STATUS_Ioinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_BLE_STATUS_Ioinit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>GPIO_ULT_INPUT_DeInit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ultrasound.o(i.GPIO_ULT_INPUT_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_ULT_INPUT_DeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[133]"></a>GPIO_ULT_INPUT_Init</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ultrasound.o(i.GPIO_ULT_INPUT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_ULT_INPUT_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_distance
</UL>

<P><STRONG><a name="[138]"></a>GPIO_ULT_OUTPUT_DeInit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ultrasound.o(i.GPIO_ULT_OUTPUT_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_ULT_OUTPUT_DeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[134]"></a>GPIO_ULT_OUTPUT_Init</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ultrasound.o(i.GPIO_ULT_OUTPUT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_ULT_OUTPUT_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_distance
</UL>

<P><STRONG><a name="[165]"></a>GetTick</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, time_server.o(i.GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GetTick &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_get
</UL>

<P><STRONG><a name="[166]"></a>GetTime</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, time_server.o(i.GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GetTime &rArr; ctime &rArr; asctime &rArr; strftime &rArr; _isoweek &rArr; _yeardays &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataPrint
</UL>

<P><STRONG><a name="[13d]"></a>Get_Maopi</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, weight.o(i.Get_Maopi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_Maopi &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_reset
</UL>

<P><STRONG><a name="[168]"></a>Get_Weight</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, weight.o(i.Get_Weight))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_set
</UL>

<P><STRONG><a name="[16a]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32l0xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADCEx_Calibration_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[16b]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[16c]"></a>HAL_ADC_Init</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[16d]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[16e]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[16f]"></a>HAL_ADC_Start</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_DMA_Abort</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>HAL_DMA_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[171]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[12f]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_send_run
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_config_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option4_run
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option3_run
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option2_run
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option1_run
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_open_run
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_close_run
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_ble
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp117_connect
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tmp117_temp
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_getData
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_distance
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_Connection_Test
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_reset
</UL>

<P><STRONG><a name="[173]"></a>HAL_FLASHEx_DATAEEPROM_Erase</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataClear
</UL>

<P><STRONG><a name="[22b]"></a>HAL_FLASHEx_DATAEEPROM_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataWrite
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataClear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr1_run
</UL>

<P><STRONG><a name="[174]"></a>HAL_FLASHEx_DATAEEPROM_Program</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataWrite
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr1_run
</UL>

<P><STRONG><a name="[22a]"></a>HAL_FLASHEx_DATAEEPROM_Unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataWrite
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataClear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr1_run
</UL>

<P><STRONG><a name="[15f]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
</UL>

<P><STRONG><a name="[163]"></a>HAL_FLASH_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
</UL>

<P><STRONG><a name="[160]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
</UL>

<P><STRONG><a name="[162]"></a>HAL_FLASH_Program</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
</UL>

<P><STRONG><a name="[15e]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
</UL>

<P><STRONG><a name="[176]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_DisableStopMode
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 356 bytes, Stack size 28 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_GPIO_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_GPIO_DeInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa0
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_ble
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BLE_STATUS_Ioinit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_IoDeInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SDA_OUT
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SDA_IN
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_Out_PP
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_IPU
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_GPIO_MODE_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_DeInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_DeInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IoDeInit
</UL>

<P><STRONG><a name="[135]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCheckBLETimesEvent
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_WaitAck
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_ReadByte
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_data
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Presence
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_distance
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[24b]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
</UL>

<P><STRONG><a name="[12e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_GPIO_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_ble
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnPressButtonTimesLedEvent
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_WaitAck
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Stop
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Start
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SendByte
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_ReadByte
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_NAck
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Ack
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Mode_IPU
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_distance
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_reset
</UL>

<P><STRONG><a name="[122]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_information_print
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_read_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_read_get
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_data_read_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_read_get
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATInsPro
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tmp117_temp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_distance
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_Data_processing
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCModel
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal2
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_que
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[178]"></a>HAL_I2C_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[17a]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_Detect
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_Detect
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
</UL>

<P><STRONG><a name="[17f]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31LowPower
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_Detect
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_Detect
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
</UL>

<P><STRONG><a name="[181]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitbusy
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite
</UL>

<P><STRONG><a name="[183]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite
</UL>

<P><STRONG><a name="[13a]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[179]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[185]"></a>HAL_IWDG_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l0xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[191]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[186]"></a>HAL_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[188]"></a>HAL_MspInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[159]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa0
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[158]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa0
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_PWREx_EnableFastWakeUp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PWR_EnterSTOPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[18b]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[18c]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[212]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[213]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[18d]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[18f]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1182 bytes, Stack size 32 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[190]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, main.o(i.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RTCEx_AlarmBEventCallback &rArr; My_AlarmInit &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AlarmInit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_BKUPRead
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_BKUPWrite
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTCEx_EnableBypassShadow
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[193]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[195]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_RTC_AlarmIRQHandler &rArr; HAL_RTCEx_AlarmBEventCallback &rArr; My_AlarmInit &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AlarmInit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
</UL>

<P><STRONG><a name="[197]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AlarmInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[199]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AlarmInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[19a]"></a>HAL_RTC_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[19b]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, stm32l0xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[19f]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AlarmInit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[19d]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1da]"></a>HAL_ResumeTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_ResumeTick))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[189]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_SuspendTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_SuspendTick))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_EnableStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_UARTEx_StopModeWakeUp
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_UARTEx_StopModeWakeUpSourceConfig</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_StopModeWakeUpSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_UARTEx_StopModeWakeUp
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_UART_MspInit</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_Connection_Test
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, main.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_UART_Transmit</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[211]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[120]"></a>HW_AdcReadChannel</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, battery_read.o(i.HW_AdcReadChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVoltage
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCModel
</UL>

<P><STRONG><a name="[1b8]"></a>HW_GPIO_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, weight.o(i.HW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_DeInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_DeInit
</UL>

<P><STRONG><a name="[1b9]"></a>HW_GetUniqueId</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, main.o(i.HW_GetUniqueId))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_GetUniqueId &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>HW_RTC_BKUPRead</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_BKUPRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_RTC_BKUPRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>

<P><STRONG><a name="[1be]"></a>HW_RTC_BKUPWrite</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_RTC_BKUPWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
</UL>

<P><STRONG><a name="[1c0]"></a>HW_RTC_GetCalendarTime</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, hw_rtc.o(i.HW_RTC_GetCalendarTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HW_RTC_GetCalendarTime &rArr; HW_RTC_Tick2ms &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
</UL>

<P><STRONG><a name="[20f]"></a>HW_RTC_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_rtc.o(i.HW_RTC_GetMinimumTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[20e]"></a>HW_RTC_GetTimerContext</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_rtc.o(i.HW_RTC_GetTimerContext))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[1c3]"></a>HW_RTC_GetTimerElapsedTime</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HW_RTC_GetTimerElapsedTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[1c4]"></a>HW_RTC_GetTimerValue</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[1c5]"></a>HW_RTC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HW_RTC_Init &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>HW_RTC_IrqHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HW_RTC_IrqHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1ca]"></a>HW_RTC_SetAlarm</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_GetMode
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[1c7]"></a>HW_RTC_SetTimerContext</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_SetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HW_RTC_SetTimerContext &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>HW_RTC_StopAlarm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_StopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_RTC_StopAlarm &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[1c2]"></a>HW_RTC_Tick2ms</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_Tick2ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_RTC_Tick2ms &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarTime
</UL>

<P><STRONG><a name="[1d0]"></a>HW_RTC_ms2Tick</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[167]"></a>HX711_Read</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, weight.o(i.HX711_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Maopi
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[177]"></a>LPM_DisableStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lowpower.o(i.LPM_DisableStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[1d5]"></a>LPM_EnterStopMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lowpower.o(i.LPM_EnterStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LPM_EnterStopMode &rArr; HAL_PWR_EnterSTOPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cb]"></a>LPM_GetMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, low_power_manager.o(i.LPM_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[1c9]"></a>LPM_SetStopMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, low_power_manager.o(i.LPM_SetStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>

<P><STRONG><a name="[1db]"></a>LidarLite</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, lidar.o(i.LidarLite))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LidarLite &rArr; waitbusy &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitbusy
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[1dc]"></a>LoraStartCheckBLE</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.LoraStartCheckBLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LoraStartCheckBLE &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e0]"></a>MX_ADC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, adc.o(i.MX_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_ADC_Init &rArr; HAL_ADC_ConfigChannel &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e1]"></a>MX_DMA_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e2]"></a>MX_GPIO_Init</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>MX_I2C1_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[1e5]"></a>MX_IWDG_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iwdg.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e6]"></a>MX_LPUART1_UART_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usart.o(i.MX_LPUART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_LPUART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e7]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[1e8]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>My_AlarmInit</STRONG> (Thumb, 242 bytes, Stack size 96 bytes, time_server.o(i.My_AlarmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = My_AlarmInit &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>

<P><STRONG><a name="[1e9]"></a>My_UARTEx_StopModeWakeUp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart.o(i.My_UARTEx_StopModeWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = My_UARTEx_StopModeWakeUp &rArr; HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1eb]"></a>NBTASK</STRONG> (Thumb, 7358 bytes, Stack size 32 bytes, nbinit.o(i.NBTASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = NBTASK &rArr; nb_MQTT_pub1_run &rArr; nb_MQTT_pub1_set &rArr; pro_data_thingspeak &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_GPIO_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_GPIO_DeInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclkoff_run
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclk_run
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qrst_run
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qrst2_run
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qicfg_run
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdnscfg_run
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_run
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qcfgev_run
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qband_run
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_csq_get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cpsms_run
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cimi_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgsn_get
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgmm_run
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgdcont_run
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunsta_run
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunoff_run
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfun_run
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_run
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_run
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_ate_run
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_run
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_uri_run
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_send_run
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_open_run
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_close_run
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_uri_run
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_send_run
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_open_run
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_close_run
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QSSLCFG_run
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QMTCFGSSL_run
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_uri_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_sub_run
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_send_run
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub_run
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub5_run
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub3_run
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub2_run
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub1_run
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_open_run
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_conn_run
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_config_set
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_close_run
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_uri_run
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_run
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_hex_run
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_config_run
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option4_run
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option3_run
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option2_run
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option1_run
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_open_run
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_head_run
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_config_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_close_run
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv6_addr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv4_addr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Set
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stored_datalog
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>OnCheckBLETimesEvent</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.OnCheckBLETimesEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OnCheckBLETimesEvent &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.LoraStartCheckBLE)
</UL>
<P><STRONG><a name="[36]"></a>OnPressButtonTimeoutEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.OnPressButtonTimeoutEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OnPressButtonTimeoutEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.user_key_event)
</UL>
<P><STRONG><a name="[33]"></a>OnPressButtonTimesLedEvent</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.OnPressButtonTimesLedEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OnPressButtonTimesLedEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.main)
<LI> main.o(i.user_key_event)
</UL>
<P><STRONG><a name="[2c]"></a>OnTxTimerEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.OnTxTimerEvent))
<BR>[Address Reference Count : 1]<UL><LI> nbinit.o(i.NBTASK)
</UL>
<P><STRONG><a name="[35]"></a>OntimesampleEvent</STRONG> (Thumb, 194 bytes, Stack size 80 bytes, main.o(i.OntimesampleEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OntimesampleEvent &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeLocalTime
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nbinit.o(i.nb_cclk2_get)
<LI> nbinit.o(i.nb_cclk_get)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1f4]"></a>RESET_GPIO_DeInit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, gpio.o(i.RESET_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RESET_GPIO_DeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>

<P><STRONG><a name="[1f3]"></a>RESET_GPIO_Init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, gpio.o(i.RESET_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RESET_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>

<P><STRONG><a name="[22]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.RNG_LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RNG_LPUART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[198]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[1a0]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[19c]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RTC_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler &rArr; HAL_RTCEx_AlarmBEventCallback &rArr; My_AlarmInit &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1f8]"></a>StrToHex</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, common.o(i.StrToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1fb]"></a>SysTimeAdd</STRONG> (Thumb, 64 bytes, Stack size 28 bytes, hw_rtc.o(i.SysTimeAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>

<P><STRONG><a name="[1f6]"></a>SysTimeGet</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, hw_rtc.o(i.SysTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SysTimeGet &rArr; HW_RTC_GetCalendarTime &rArr; HW_RTC_Tick2ms &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarTime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_BKUPRead
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_get
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OntimesampleEvent
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
</UL>

<P><STRONG><a name="[1f7]"></a>SysTimeLocalTime</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, time_server.o(i.SysTimeLocalTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysTimeLocalTime &rArr; CalendarDiv60
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalendarDiv60
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_get
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OntimesampleEvent
</UL>

<P><STRONG><a name="[1fd]"></a>SysTimeSet</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, hw_rtc.o(i.SysTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SysTimeSet &rArr; HW_RTC_GetCalendarTime &rArr; HW_RTC_Tick2ms &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarTime
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_get
</UL>

<P><STRONG><a name="[1fe]"></a>SysTimeSub</STRONG> (Thumb, 64 bytes, Stack size 28 bytes, hw_rtc.o(i.SysTimeSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysTimeSub
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
</UL>

<P><STRONG><a name="[34]"></a>SystemClock_Config</STRONG> (Thumb, 148 bytes, Stack size 128 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[25]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[200]"></a>TMP117_I2C_Ack</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ne117.o(i.TMP117_I2C_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TMP117_I2C_Ack &rArr; TMP117_I2C_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SDA_OUT
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_ReadByte
</UL>

<P><STRONG><a name="[202]"></a>TMP117_I2C_Delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ne117.o(i.TMP117_I2C_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMP117_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_WaitAck
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Stop
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Start
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SendByte
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_ReadByte
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_NAck
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Ack
</UL>

<P><STRONG><a name="[140]"></a>TMP117_I2C_GPIO_MODE_Config</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ne117.o(i.TMP117_I2C_GPIO_MODE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TMP117_I2C_GPIO_MODE_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[203]"></a>TMP117_I2C_NAck</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ne117.o(i.TMP117_I2C_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TMP117_I2C_NAck &rArr; TMP117_I2C_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SDA_OUT
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_ReadByte
</UL>

<P><STRONG><a name="[204]"></a>TMP117_I2C_ReadByte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ne117.o(i.TMP117_I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TMP117_I2C_ReadByte &rArr; TMP117_I2C_NAck &rArr; TMP117_I2C_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SDA_IN
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_NAck
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Delay
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Read_Len
</UL>

<P><STRONG><a name="[206]"></a>TMP117_I2C_Read_Len</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ne117.o(i.TMP117_I2C_Read_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TMP117_I2C_Read_Len &rArr; TMP117_I2C_ReadByte &rArr; TMP117_I2C_NAck &rArr; TMP117_I2C_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_WaitAck
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Stop
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Start
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SendByte
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp117_connect
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tmp117_temp
</UL>

<P><STRONG><a name="[205]"></a>TMP117_I2C_SDA_IN</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ne117.o(i.TMP117_I2C_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TMP117_I2C_SDA_IN &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_WaitAck
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_ReadByte
</UL>

<P><STRONG><a name="[201]"></a>TMP117_I2C_SDA_OUT</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ne117.o(i.TMP117_I2C_SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TMP117_I2C_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Stop
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Start
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SendByte
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_NAck
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Ack
</UL>

<P><STRONG><a name="[208]"></a>TMP117_I2C_SendByte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ne117.o(i.TMP117_I2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TMP117_I2C_SendByte &rArr; TMP117_I2C_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SDA_OUT
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Write_Len
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Read_Len
</UL>

<P><STRONG><a name="[207]"></a>TMP117_I2C_Start</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ne117.o(i.TMP117_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TMP117_I2C_Start &rArr; TMP117_I2C_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SDA_OUT
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Write_Len
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Read_Len
</UL>

<P><STRONG><a name="[20a]"></a>TMP117_I2C_Stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ne117.o(i.TMP117_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TMP117_I2C_Stop &rArr; TMP117_I2C_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SDA_OUT
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Write_Len
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_WaitAck
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Read_Len
</UL>

<P><STRONG><a name="[209]"></a>TMP117_I2C_WaitAck</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ne117.o(i.TMP117_I2C_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TMP117_I2C_WaitAck &rArr; TMP117_I2C_Stop &rArr; TMP117_I2C_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Stop
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SDA_IN
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Write_Len
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Read_Len
</UL>

<P><STRONG><a name="[20b]"></a>TMP117_I2C_Write_Len</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ne117.o(i.TMP117_I2C_Write_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TMP117_I2C_Write_Len &rArr; TMP117_I2C_WaitAck &rArr; TMP117_I2C_Stop &rArr; TMP117_I2C_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_WaitAck
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Stop
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Start
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp117_connect
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tmp117_temp
</UL>

<P><STRONG><a name="[1d1]"></a>TimerGetCurrentTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time_server.o(i.TimerGetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TimerGetCurrentTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read
</UL>

<P><STRONG><a name="[1d2]"></a>TimerGetElapsedTime</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, time_server.o(i.TimerGetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read
</UL>

<P><STRONG><a name="[1dd]"></a>TimerInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, time_server.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_get
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraStartCheckBLE
</UL>

<P><STRONG><a name="[194]"></a>TimerIrqHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, time_server.o(i.TimerIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerContext
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[1de]"></a>TimerSetValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, time_server.o(i.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onCalibrationtimeEvent
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_time
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OntimesampleEvent
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCheckBLETimesEvent
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraStartCheckBLE
</UL>

<P><STRONG><a name="[1df]"></a>TimerStart</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, time_server.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onCalibrationtimeEvent
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_time
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OntimesampleEvent
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCheckBLETimesEvent
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraStartCheckBLE
</UL>

<P><STRONG><a name="[1f5]"></a>TimerStop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, time_server.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_intTimeoutEvent
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnPressButtonTimesLedEvent
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnPressButtonTimeoutEvent
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCheckBLETimesEvent
</UL>

<P><STRONG><a name="[1b0]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b1]"></a>UART_CheckIdleState</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1af]"></a>UART_SetConfig</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b3]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[1a4]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[215]"></a>ULT_Check_Sum</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ult.o(i.ULT_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ULT_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_Data_processing
</UL>

<P><STRONG><a name="[139]"></a>ULT_Connection_Test</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ult.o(i.ULT_Connection_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ULT_Connection_Test &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[214]"></a>ULT_Data_processing</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ult.o(i.ULT_Data_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ULT_Data_processing &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_Check_Sum
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[216]"></a>ULT_Rest</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ult.o(i.ULT_Rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ULT_Rest
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[217]"></a>ULT_distance</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ultrasound.o(i.ULT_distance))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ULT_distance &rArr; GPIO_ULT_OUTPUT_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[218]"></a>ULT_getData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ult.o(i.ULT_getData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ULT_getData &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[20]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[13f]"></a>WEIGHT_DOUT_DeInit</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, weight.o(i.WEIGHT_DOUT_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WEIGHT_DOUT_DeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_reset
</UL>

<P><STRONG><a name="[13c]"></a>WEIGHT_DOUT_Init</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, weight.o(i.WEIGHT_DOUT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = WEIGHT_DOUT_Init &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_reset
</UL>

<P><STRONG><a name="[13e]"></a>WEIGHT_SCK_DeInit</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, weight.o(i.WEIGHT_SCK_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WEIGHT_SCK_DeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_reset
</UL>

<P><STRONG><a name="[13b]"></a>WEIGHT_SCK_Init</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, weight.o(i.WEIGHT_SCK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = WEIGHT_SCK_Init &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_reset
</UL>

<P><STRONG><a name="[21c]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[263]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[123]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_information_print
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_information_print
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qband_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_read_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_read_get
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_data_read_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_read_get
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATInsPro
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_ble
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tmp117_temp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_distance
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_Data_processing
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCModel
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal2
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataPrint
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatalogPrint
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri4_get
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri3_get
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri2_get
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri1_get
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uname_get
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tlsmod_get
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tdc_get
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_subtopic_get
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sleep_get
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_servaddr_get
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rxdl_get
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_que
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pword_get
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwd_get
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pubtopic_get
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pro_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pro_get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mqos_get
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_model_get
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mod_set
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mod_get
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ldata_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_inmod_get
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ext_get
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_dnstimer_get
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_dnscfg_get
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deui_get
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_csqtime_get
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_clocklog_get
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_apn_get
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_5vt_get
</UL>

<P><STRONG><a name="[264]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[265]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[21e]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[266]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1ba]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_get
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_csq_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgdcont_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_send_set
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_send_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QSSLCFG_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_hex_set
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Get
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetUniqueId
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[267]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[268]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[11b]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[18e]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hw_rtc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[100]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, common.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vfscanf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[269]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[26a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[26b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[26c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[55]"></a>at_5vt_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_5vt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_5vt_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>at_5vt_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at.o(i.at_5vt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_5vt_set &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>at_apn_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_apn_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_apn_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>at_apn_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at.o(i.at_apn_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_apn_set &rArr; space_fun
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_fun
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>at_cdp_run</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, at.o(i.at_cdp_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = at_cdp_run &rArr; shtDataPrint &rArr; GetTime &rArr; ctime &rArr; asctime &rArr; strftime &rArr; _isoweek &rArr; _yeardays &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>at_cdp_set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at.o(i.at_cdp_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_cdp_set &rArr; shtDataClear &rArr; HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataClear
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>at_cfg_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, at.o(i.at_cfg_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_cfg_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>at_client_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_client_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_client_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>at_client_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at.o(i.at_client_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_client_set &rArr; space_fun
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_fun
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>at_clocklog_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at.o(i.at_clocklog_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_clocklog_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>at_clocklog_set</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, at.o(i.at_clocklog_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = at_clocklog_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_run
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>at_csqtime_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_csqtime_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_csqtime_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>at_csqtime_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at.o(i.at_csqtime_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_csqtime_set &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>at_deui_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_deui_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_deui_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>at_deui_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at.o(i.at_deui_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_deui_set &rArr; hexDetection
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexDetection
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>at_dnscfg_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_dnscfg_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_dnscfg_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>at_dnscfg_set</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, at.o(i.at_dnscfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_dnscfg_set &rArr; countchar
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countchar
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_fun
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>at_dnstimer_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_dnstimer_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_dnstimer_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>at_dnstimer_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at.o(i.at_dnstimer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_dnstimer_set &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>at_ext_get</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at.o(i.at_ext_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_ext_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>at_ext_set</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, at.o(i.at_ext_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = at_ext_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>at_fdr1_run</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, at.o(i.at_fdr1_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_fdr1_run &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatalogClear
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>at_fdr_run</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, at.o(i.at_fdr_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_fdr_run &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatalogClear
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>at_getlog_run</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, at.o(i.at_getlog_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = at_getlog_run &rArr; DatalogPrint &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatalogPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>at_getlog_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at.o(i.at_getlog_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = at_getlog_set &rArr; DatalogClear &rArr; FLASH_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatalogClear
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>at_getsensorvalue_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at.o(i.at_getsensorvalue_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = at_getsensorvalue_set &rArr; txPayLoadDeal2 &rArr; get_sensorvalue &rArr; LidarLite &rArr; waitbusy &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal2
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>at_inmod_get</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at.o(i.at_inmod_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_inmod_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>at_inmod_set</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, at.o(i.at_inmod_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = at_inmod_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa0
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>at_ldata_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, at.o(i.at_ldata_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_ldata_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>at_mod_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_mod_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_mod_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>at_mod_set</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, at.o(i.at_mod_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_mod_set &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>at_model_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_model_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_model_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>at_mqos_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_mqos_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_mqos_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>at_mqos_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at.o(i.at_mqos_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_mqos_set &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>at_pro_get</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at.o(i.at_pro_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_pro_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>at_pro_set</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, at.o(i.at_pro_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_pro_set &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>at_pubtopic_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_pubtopic_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_pubtopic_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>at_pubtopic_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at.o(i.at_pubtopic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_pubtopic_set &rArr; space_fun
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_fun
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>at_pwd_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_pwd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_pwd_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>at_pwd_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at.o(i.at_pwd_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_pwd_set &rArr; space_fun
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_fun
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>at_pword_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_pword_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_pword_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>at_pword_set</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, at.o(i.at_pword_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_pword_set &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>at_que</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, at.o(i.at_que))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_que &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATInsPro
</UL>

<P><STRONG><a name="[39]"></a>at_reset_run</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at.o(i.at_reset_run))
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>at_return_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at.o(i.at_return_error))
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>at_rxdl_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_rxdl_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_rxdl_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>at_rxdl_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at.o(i.at_rxdl_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_rxdl_set &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>at_servaddr_get</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, at.o(i.at_servaddr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_servaddr_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>at_servaddr_set</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, at.o(i.at_servaddr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_servaddr_set &rArr; space_fun
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_fun
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>at_sleep_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_sleep_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_sleep_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>at_sleep_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at.o(i.at_sleep_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_sleep_set &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>at_subtopic_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_subtopic_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_subtopic_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>at_subtopic_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at.o(i.at_subtopic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_subtopic_set &rArr; space_fun
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_fun
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>at_tdc_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_tdc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_tdc_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>at_tdc_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at.o(i.at_tdc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_tdc_set &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>at_tlsmod_get</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at.o(i.at_tlsmod_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_tlsmod_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>at_tlsmod_set</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, at.o(i.at_tlsmod_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_tlsmod_set &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>at_uname_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_uname_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_uname_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>at_uname_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at.o(i.at_uname_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_uname_set &rArr; space_fun
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_fun
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>at_uri1_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_uri1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_uri1_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>at_uri1_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at.o(i.at_uri1_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_uri1_set &rArr; space_fun
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_fun
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>at_uri2_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_uri2_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_uri2_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>at_uri2_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at.o(i.at_uri2_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_uri2_set &rArr; space_fun
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_fun
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>at_uri3_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_uri3_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_uri3_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>at_uri3_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at.o(i.at_uri3_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_uri3_set &rArr; space_fun
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_fun
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>at_uri4_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at.o(i.at_uri4_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_uri4_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>at_uri4_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at.o(i.at_uri4_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_uri4_set &rArr; space_fun
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_fun
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>at_weight_GapValue_get</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, at.o(i.at_weight_GapValue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_weight_GapValue_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>at_weight_GapValue_set</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, at.o(i.at_weight_GapValue_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = at_weight_GapValue_set &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>at_weight_get</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at.o(i.at_weight_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = at_weight_get &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>at_weight_reset</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, at.o(i.at_weight_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = at_weight_reset &rArr; Get_Maopi &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_DeInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_DeInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Maopi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at.o(.constdata)
</UL>
<P><STRONG><a name="[22f]"></a>compare_time</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.compare_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = compare_time &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_get
</UL>

<P><STRONG><a name="[230]"></a>config_Get</STRONG> (Thumb, 1782 bytes, Stack size 24 bytes, at.o(i.config_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = config_Get &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa0
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_read
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>config_Set</STRONG> (Thumb, 1284 bytes, Stack size 24 bytes, at.o(i.config_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = config_Set &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATInsPro
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stored_datalog
</UL>

<P><STRONG><a name="[229]"></a>countchar</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, common.o(i.countchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = countchar
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_dnscfg_set
</UL>

<P><STRONG><a name="[30]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[232]"></a>getVoltage</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, battery_read.o(i.getVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = getVoltage &rArr; HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_send_set
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal2
</UL>

<P><STRONG><a name="[21a]"></a>get_sensorvalue</STRONG> (Thumb, 494 bytes, Stack size 24 bytes, common.o(i.get_sensorvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = get_sensorvalue &rArr; LidarLite &rArr; waitbusy &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_IoDeInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tmp117_temp
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_getData
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_distance
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_Rest
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_Data_processing
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_GPIO_MODE_Config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_DeInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_DeInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IoDeInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCModel
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_DeInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_DeInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal2
</UL>

<P><STRONG><a name="[237]"></a>get_tmp117_temp</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, ne117.o(i.get_tmp117_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = get_tmp117_temp &rArr; TMP117_I2C_Read_Len &rArr; TMP117_I2C_ReadByte &rArr; TMP117_I2C_NAck &rArr; TMP117_I2C_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Write_Len
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Read_Len
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[228]"></a>hexDetection</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at.o(i.hexDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hexDetection
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deui_set
</UL>

<P><STRONG><a name="[1f0]"></a>is_ipv4_addr</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, common.o(i.is_ipv4_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = is_ipv4_addr &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>

<P><STRONG><a name="[1f1]"></a>is_ipv6_addr</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, common.o(i.is_ipv6_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = is_ipv6_addr &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>

<P><STRONG><a name="[1ef]"></a>led_on</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, common.o(i.led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = led_on &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>main</STRONG> (Thumb, 606 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = main &rArr; user_key_event &rArr; NBTASK &rArr; nb_MQTT_pub1_run &rArr; nb_MQTT_pub1_set &rArr; pro_data_thingspeak &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataINIT
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_information_print
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_information_print
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Get
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_UARTEx_StopModeWakeUp
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_DisableStopMode
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa0
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_ble
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onCalibrationtimeEvent
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraStartCheckBLE
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetUniqueId
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BLE_STATUS_Ioinit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[240]"></a>mode_data</STRONG> (Thumb, 1598 bytes, Stack size 32 bytes, nb_payload.o(i.mode_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_DeInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_DeInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
</UL>

<P><STRONG><a name="[c0]"></a>nb_COAP_close_run</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nb_coap.o(i.nb_COAP_close_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_COAP_close_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_close_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>nb_COAP_close_set</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_close_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_COAP_close_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_close_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>nb_COAP_config_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_config_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_COAP_config_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>nb_COAP_head_run</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nb_coap.o(i.nb_COAP_head_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_COAP_head_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_head_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>nb_COAP_head_set</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_head_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_COAP_head_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_head_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>nb_COAP_open_run</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nb_coap.o(i.nb_COAP_open_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_COAP_open_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_open_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>nb_COAP_open_set</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nb_coap.o(i.nb_COAP_open_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nb_COAP_open_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_open_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>nb_COAP_option1_run</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nb_coap.o(i.nb_COAP_option1_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_COAP_option1_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option1_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>nb_COAP_option1_set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_option1_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_COAP_option1_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option1_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>nb_COAP_option2_run</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nb_coap.o(i.nb_COAP_option2_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_COAP_option2_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option2_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>nb_COAP_option2_set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_option2_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_COAP_option2_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option2_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>nb_COAP_option3_run</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nb_coap.o(i.nb_COAP_option3_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_COAP_option3_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option3_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>nb_COAP_option3_set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_option3_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_COAP_option3_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option3_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>nb_COAP_option4_run</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nb_coap.o(i.nb_COAP_option4_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_COAP_option4_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option4_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>nb_COAP_option4_set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_option4_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_COAP_option4_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option4_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>nb_COAP_read_get</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nb_coap.o(i.nb_COAP_read_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nb_COAP_read_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_read_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>nb_COAP_read_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_read_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nb_COAP_read_run &rArr; rxPayLoadDeal &rArr; config_Set &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_read_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_uri_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>nb_COAP_send_config_run</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_send_config_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_COAP_send_config_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_config_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>nb_COAP_send_config_set</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_send_config_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_COAP_send_config_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_config_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>nb_COAP_send_hex_run</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_send_hex_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_COAP_send_hex_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_hex_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>nb_COAP_send_hex_set</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_send_hex_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nb_COAP_send_hex_set &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_hex_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>nb_COAP_send_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_send_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nb_COAP_send_run &rArr; nb_COAP_send_set &rArr; pro_data &rArr; mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>nb_COAP_send_set</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nb_coap.o(i.nb_COAP_send_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nb_COAP_send_set &rArr; pro_data &rArr; mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>nb_COAP_uri_run</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nb_coap.o(i.nb_COAP_uri_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nb_COAP_uri_run &rArr; nb_COAP_read_run &rArr; rxPayLoadDeal &rArr; config_Set &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_read_run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>nb_MQTT_close_run</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nb_mqtt.o(i.nb_MQTT_close_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_MQTT_close_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>nb_MQTT_close_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nb_mqtt.o(i.nb_MQTT_close_set))
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>nb_MQTT_config_set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nb_mqtt.o(i.nb_MQTT_config_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nb_MQTT_config_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>nb_MQTT_conn_run</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_conn_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_MQTT_conn_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_conn_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>nb_MQTT_conn_set</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_conn_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nb_MQTT_conn_set &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_conn_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>nb_MQTT_data_read_run</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nb_mqtt.o(i.nb_MQTT_data_read_run))
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>nb_MQTT_data_read_set</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_data_read_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nb_MQTT_data_read_set &rArr; rxPayLoadDeal &rArr; config_Set &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_uri_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>nb_MQTT_open_run</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_open_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_MQTT_open_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_open_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>nb_MQTT_open_set</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, nb_mqtt.o(i.nb_MQTT_open_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nb_MQTT_open_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_open_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>nb_MQTT_pub1_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_pub1_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = nb_MQTT_pub1_run &rArr; nb_MQTT_pub1_set &rArr; pro_data_thingspeak &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub1_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>nb_MQTT_pub1_set</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_pub1_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = nb_MQTT_pub1_set &rArr; pro_data_thingspeak &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data_thingspeak
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub1_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>nb_MQTT_pub2_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_pub2_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nb_MQTT_pub2_run &rArr; nb_MQTT_pub2_set &rArr; pro_data &rArr; mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub2_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>nb_MQTT_pub2_set</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_pub2_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nb_MQTT_pub2_set &rArr; pro_data &rArr; mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub2_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>nb_MQTT_pub3_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_pub3_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nb_MQTT_pub3_run &rArr; nb_MQTT_pub3_set &rArr; pro_data &rArr; mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub3_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>nb_MQTT_pub3_set</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_pub3_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nb_MQTT_pub3_set &rArr; pro_data &rArr; mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub3_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>nb_MQTT_pub5_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_pub5_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nb_MQTT_pub5_run &rArr; nb_MQTT_pub5_set &rArr; pro_data &rArr; mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub5_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>nb_MQTT_pub5_set</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_pub5_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nb_MQTT_pub5_set &rArr; pro_data &rArr; mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub5_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>nb_MQTT_pub_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_pub_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_MQTT_pub_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>nb_MQTT_pub_set</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_pub_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nb_MQTT_pub_set &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>nb_MQTT_send_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_send_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_MQTT_send_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_send_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>nb_MQTT_send_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nb_mqtt.o(i.nb_MQTT_send_set))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_send_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>nb_MQTT_sub_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_sub_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_MQTT_sub_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_sub_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>nb_MQTT_sub_set</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_MQTT_sub_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_MQTT_sub_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_sub_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>nb_MQTT_uri_run</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, nb_mqtt.o(i.nb_MQTT_uri_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nb_MQTT_uri_run &rArr; nb_MQTT_data_read_set &rArr; rxPayLoadDeal &rArr; config_Set &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_data_read_set
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>nb_QMTCFGSSL_run</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_QMTCFGSSL_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_QMTCFGSSL_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QMTCFGSSL_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>nb_QMTCFGSSL_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_QMTCFGSSL_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_QMTCFGSSL_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QMTCFGSSL_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>nb_QSSLCFG_run</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_QSSLCFG_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_QSSLCFG_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QSSLCFG_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>nb_QSSLCFG_set</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nb_mqtt.o(i.nb_QSSLCFG_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nb_QSSLCFG_set &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QSSLCFG_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>nb_TCP_close_run</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nb_tcp.o(i.nb_TCP_close_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_TCP_close_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>nb_TCP_close_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nb_tcp.o(i.nb_TCP_close_set))
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>nb_TCP_open_run</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nb_tcp.o(i.nb_TCP_open_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_TCP_open_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_open_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>nb_TCP_open_set</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nb_tcp.o(i.nb_TCP_open_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nb_TCP_open_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_open_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>nb_TCP_read_get</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nb_tcp.o(i.nb_TCP_read_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nb_TCP_read_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_read_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>nb_TCP_read_run</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nb_tcp.o(i.nb_TCP_read_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nb_TCP_read_run &rArr; rxPayLoadDeal &rArr; config_Set &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_null_run
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_read_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_uri_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>nb_TCP_send_run</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nb_tcp.o(i.nb_TCP_send_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nb_TCP_send_run &rArr; nb_TCP_send_set &rArr; pro_data &rArr; mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_send_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>nb_TCP_send_set</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, nb_tcp.o(i.nb_TCP_send_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nb_TCP_send_set &rArr; pro_data &rArr; mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVoltage
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_send_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>nb_TCP_uri_run</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nb_tcp.o(i.nb_TCP_uri_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nb_TCP_uri_run &rArr; nb_TCP_read_run &rArr; rxPayLoadDeal &rArr; config_Set &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_read_run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>nb_UDP_close_run</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nb_udp.o(i.nb_UDP_close_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_UDP_close_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>nb_UDP_close_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nb_udp.o(i.nb_UDP_close_set))
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>nb_UDP_open_run</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nb_udp.o(i.nb_UDP_open_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_UDP_open_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_open_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>nb_UDP_open_set</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nb_udp.o(i.nb_UDP_open_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nb_UDP_open_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_open_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>nb_UDP_read_get</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nb_udp.o(i.nb_UDP_read_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nb_UDP_read_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_read_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>nb_UDP_read_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nb_udp.o(i.nb_UDP_read_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nb_UDP_read_run &rArr; rxPayLoadDeal &rArr; config_Set &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_read_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_uri_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>nb_UDP_send_run</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nb_udp.o(i.nb_UDP_send_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = nb_UDP_send_run &rArr; nb_UDP_send_set &rArr; pro_data &rArr; mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_send_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>nb_UDP_send_set</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, nb_udp.o(i.nb_UDP_send_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nb_UDP_send_set &rArr; pro_data &rArr; mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_data
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_send_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>nb_UDP_uri_run</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nb_udp.o(i.nb_UDP_uri_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nb_UDP_uri_run &rArr; nb_UDP_read_run &rArr; rxPayLoadDeal &rArr; config_Set &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_read_run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>nb_at_run</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nbinit.o(i.nb_at_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_at_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[241]"></a>nb_at_send</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nbinit.o(i.nb_at_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclkoff_set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclkoff_run
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclk_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclk_run
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qrst_run
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qrst2_run
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qicfg_set
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qicfg_run
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdnscfg_run
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_run
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qcfgev_run
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qband_run
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_csq_get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cpsms_run
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cimi_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgsn_get
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgmm_run
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgdcont_run
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunsta_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunsta_run
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunoff_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunoff_run
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfun_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfun_run
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_run
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_run
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_ate_run
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_run
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_send_run
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_open_run
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_close_run
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_send_run
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_read_run
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_open_run
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_close_run
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QSSLCFG_run
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_QMTCFGSSL_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_sub_run
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_send_run
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub_run
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub5_run
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub3_run
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub2_run
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub1_run
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_open_run
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_conn_run
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_config_set
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_close_run
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_run
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_hex_run
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_config_run
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option4_run
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option3_run
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option2_run
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_option1_run
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_open_run
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_head_run
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_config_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_close_run
</UL>

<P><STRONG><a name="[7f]"></a>nb_ate_run</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nbinit.o(i.nb_ate_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nb_ate_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>nb_cclk2_get</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, nbinit.o(i.nb_cclk2_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nb_cclk2_get &rArr; GetTick &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeLocalTime
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_time
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>nb_cclk2_run</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nbinit.o(i.nb_cclk2_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nb_cclk2_run &rArr; nb_cclk2_get &rArr; GetTick &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk2_get
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>nb_cclk_get</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, nbinit.o(i.nb_cclk_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nb_cclk_get &rArr; GetTick &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeLocalTime
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_time
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>nb_cclk_run</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nbinit.o(i.nb_cclk_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nb_cclk_run &rArr; nb_cclk_get &rArr; GetTick &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cclk_get
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_clocklog_set
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>nb_cfun_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nbinit.o(i.nb_cfun_get))
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>nb_cfun_run</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nbinit.o(i.nb_cfun_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_cfun_run &rArr; nb_cfun_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfun_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>nb_cfun_set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nbinit.o(i.nb_cfun_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_cfun_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfun_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>nb_cfunoff_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nbinit.o(i.nb_cfunoff_get))
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>nb_cfunoff_run</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nbinit.o(i.nb_cfunoff_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_cfunoff_run &rArr; nb_cfunoff_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunoff_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>nb_cfunoff_set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nbinit.o(i.nb_cfunoff_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_cfunoff_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunoff_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>nb_cfunsta_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nbinit.o(i.nb_cfunsta_get))
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>nb_cfunsta_run</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nbinit.o(i.nb_cfunsta_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_cfunsta_run &rArr; nb_cfunsta_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunsta_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>nb_cfunsta_set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nbinit.o(i.nb_cfunsta_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_cfunsta_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cfunsta_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>nb_cgdcont_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nbinit.o(i.nb_cgdcont_get))
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>nb_cgdcont_run</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nbinit.o(i.nb_cgdcont_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nb_cgdcont_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgdcont_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>nb_cgdcont_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nbinit.o(i.nb_cgdcont_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nb_cgdcont_set &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgdcont_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>nb_cgmm_get</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nbinit.o(i.nb_cgmm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nb_cgmm_get &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgmm_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>nb_cgmm_run</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nbinit.o(i.nb_cgmm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_cgmm_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cgmm_get
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>nb_cgsn_get</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, nbinit.o(i.nb_cgsn_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_cgsn_get &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>nb_cimi_get</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, nbinit.o(i.nb_cimi_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_cimi_get &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>nb_cpsms_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nbinit.o(i.nb_cpsms_get))
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>nb_cpsms_run</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nbinit.o(i.nb_cpsms_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nb_cpsms_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cpsms_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>nb_cpsms_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nbinit.o(i.nb_cpsms_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_cpsms_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cpsms_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>nb_csq_get</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, nbinit.o(i.nb_csq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nb_csq_get &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>nb_intTimeoutEvent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.nb_intTimeoutEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nb_intTimeoutEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nbinit.o(i.NBTASK)
</UL>
<P><STRONG><a name="[7e]"></a>nb_null_run</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nbinit.o(i.nb_null_run))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_read_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>nb_qband_get</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nbinit.o(i.nb_qband_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nb_qband_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qband_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>nb_qband_run</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nbinit.o(i.nb_qband_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_qband_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qband_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qband_get
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>nb_qband_set</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nbinit.o(i.nb_qband_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_qband_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qband_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>nb_qcfgev_run</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nbinit.o(i.nb_qcfgev_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nb_qcfgev_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qcfgev_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>nb_qcfgev_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nbinit.o(i.nb_qcfgev_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_qcfgev_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qcfgev_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>nb_qdns_get</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, nbinit.o(i.nb_qdns_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nb_qdns_get &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>nb_qdns_run</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nbinit.o(i.nb_qdns_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nb_qdns_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>nb_qdns_set</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nbinit.o(i.nb_qdns_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nb_qdns_set
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>nb_qdnscfg_run</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nbinit.o(i.nb_qdnscfg_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nb_qdnscfg_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdnscfg_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>nb_qdnscfg_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nbinit.o(i.nb_qdnscfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_qdnscfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdnscfg_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>nb_qicfg_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nbinit.o(i.nb_qicfg_get))
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>nb_qicfg_run</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nbinit.o(i.nb_qicfg_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_qicfg_run &rArr; nb_qicfg_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qicfg_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>nb_qicfg_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nbinit.o(i.nb_qicfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_qicfg_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qicfg_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>nb_qrst2_run</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nbinit.o(i.nb_qrst2_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nb_qrst2_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>nb_qrst_run</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nbinit.o(i.nb_qrst_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nb_qrst_run &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>nb_qsclk_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nbinit.o(i.nb_qsclk_get))
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>nb_qsclk_run</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nbinit.o(i.nb_qsclk_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_qsclk_run &rArr; nb_qsclk_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclk_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>nb_qsclk_set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nbinit.o(i.nb_qsclk_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_qsclk_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclk_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>nb_qsclkoff_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nbinit.o(i.nb_qsclkoff_get))
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>nb_qsclkoff_run</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nbinit.o(i.nb_qsclkoff_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nb_qsclkoff_run &rArr; nb_qsclkoff_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclkoff_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>nb_qsclkoff_set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nbinit.o(i.nb_qsclkoff_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nb_qsclkoff_set &rArr; nb_at_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_send
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qsclkoff_run
</UL>
<BR>[Address Reference Count : 5]<UL><LI> nb_udp.o(.constdata)
<LI> nb_tcp.o(.constdata)
<LI> nbinit.o(.constdata)
<LI> nb_mqtt.o(.constdata)
<LI> nb_coap.o(.constdata)
</UL>
<P><STRONG><a name="[239]"></a>new_firmware_update</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, common.o(i.new_firmware_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = new_firmware_update &rArr; string_touint &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_touint
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr1_run
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>onCalibrationtimeEvent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.onCalibrationtimeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = onCalibrationtimeEvent &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[243]"></a>pro_data</STRONG> (Thumb, 1520 bytes, Stack size 224 bytes, nb_payload.o(i.pro_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pro_data &rArr; mode_data &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVoltage
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_send_set
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_send_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub5_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub3_set
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub2_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_send_set
</UL>

<P><STRONG><a name="[244]"></a>pro_data_thingspeak</STRONG> (Thumb, 1440 bytes, Stack size 536 bytes, nb_payload.o(i.pro_data_thingspeak))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = pro_data_thingspeak &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVoltage
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_DeInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_DeInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_pub1_set
</UL>

<P><STRONG><a name="[23d]"></a>product_information_print</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, common.o(i.product_information_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = product_information_print &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23c]"></a>reboot_information_print</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, common.o(i.reboot_information_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = reboot_information_print &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23a]"></a>rename_ble</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, main.o(i.rename_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rename_ble &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>rtrim</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, at.o(i.rtrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtrim
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATInsPro
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
</UL>

<P><STRONG><a name="[242]"></a>rxPayLoadDeal</STRONG> (Thumb, 1664 bytes, Stack size 40 bytes, common.o(i.rxPayLoadDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rxPayLoadDeal &rArr; config_Set &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtrim
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa0
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_UDP_read_run
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_TCP_read_run
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_MQTT_data_read_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_COAP_read_run
</UL>

<P><STRONG><a name="[233]"></a>sht20Data</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, sht20.o(i.sht20Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sht20Data &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[131]"></a>sht2x_Detect</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sht20.o(i.sht2x_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sht2x_Detect &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[234]"></a>sht31Data</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, sht31.o(i.sht31Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sht31Data &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31LowPower
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[248]"></a>sht31Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sht31.o(i.sht31Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sht31Init &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
</UL>

<P><STRONG><a name="[249]"></a>sht31LowPower</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sht31.o(i.sht31LowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sht31LowPower &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
</UL>

<P><STRONG><a name="[132]"></a>sht3x_Detect</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sht31.o(i.sht3x_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sht3x_Detect &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[226]"></a>shtDataClear</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, common.o(i.shtDataClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shtDataClear &rArr; HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cdp_set
</UL>

<P><STRONG><a name="[23b]"></a>shtDataINIT</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, common.o(i.shtDataINIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shtDataINIT
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[225]"></a>shtDataPrint</STRONG> (Thumb, 882 bytes, Stack size 80 bytes, common.o(i.shtDataPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = shtDataPrint &rArr; GetTime &rArr; ctime &rArr; asctime &rArr; strftime &rArr; _isoweek &rArr; _yeardays &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cdp_run
</UL>

<P><STRONG><a name="[21b]"></a>shtDataWrite</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, common.o(i.shtDataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = shtDataWrite &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USERTASK
</UL>

<P><STRONG><a name="[224]"></a>space_fun</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.space_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = space_fun
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri4_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri3_set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri2_set
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uri1_set
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uname_set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_subtopic_set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_servaddr_set
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwd_set
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pubtopic_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_dnscfg_set
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_apn_set
</UL>

<P><STRONG><a name="[1ed]"></a>stored_datalog</STRONG> (Thumb, 122 bytes, Stack size 536 bytes, nbinit.o(i.stored_datalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = stored_datalog &rArr; config_Set &rArr; FLASH_program &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_Set
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>

<P><STRONG><a name="[246]"></a>string_touint</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, common.o(i.string_touint))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = string_touint &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[227]"></a>tiny_sscanf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, tiny_sscanf.o(i.tiny_sscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_inmod_set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ext_set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_clocklog_set
</UL>

<P><STRONG><a name="[141]"></a>tmp117_connect</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ne117.o(i.tmp117_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = tmp117_connect &rArr; TMP117_I2C_Read_Len &rArr; TMP117_I2C_ReadByte &rArr; TMP117_I2C_NAck &rArr; TMP117_I2C_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Write_Len
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_Read_Len
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[1f2]"></a>txPayLoadDeal</STRONG> (Thumb, 3706 bytes, Stack size 48 bytes, common.o(i.txPayLoadDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = txPayLoadDeal &rArr; LidarLite &rArr; waitbusy &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_IoDeInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht31Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht20Data
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tmp117_temp
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_getData
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_distance
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_Rest
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_Data_processing
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP117_I2C_GPIO_MODE_Config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_DeInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_DeInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IoDeInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemp_SkipRom
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_touint
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVoltage
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCModel
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_DeInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_DeInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Maopi
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
</UL>

<P><STRONG><a name="[22d]"></a>txPayLoadDeal2</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, common.o(i.txPayLoadDeal2))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = txPayLoadDeal2 &rArr; get_sensorvalue &rArr; LidarLite &rArr; waitbusy &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVoltage
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getsensorvalue_set
</UL>

<P><STRONG><a name="[235]"></a>uart1_Init</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, usart.o(i.uart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uart1_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[236]"></a>uart1_IoDeInit</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, usart.o(i.uart1_IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uart1_IoDeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txPayLoadDeal
</UL>

<P><STRONG><a name="[23f]"></a>user_key_event</STRONG> (Thumb, 506 bytes, Stack size 48 bytes, main.o(i.user_key_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = user_key_event &rArr; NBTASK &rArr; nb_MQTT_pub1_run &rArr; nb_MQTT_pub1_set &rArr; pro_data_thingspeak &rArr; Get_Weight &rArr; HX711_Read &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTASK
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init_pa0
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EX_GPIO_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>waitbusy</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, lidar.o(i.waitbusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = waitbusy &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[219]"></a>USERTASK</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, main.o(i.USERTASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USERTASK &rArr; get_sensorvalue &rArr; LidarLite &rArr; waitbusy &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtDataWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtrim
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_run
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_qdns_get
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensorvalue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATInsPro
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23e]"></a>__NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c1]"></a>HW_RTC_GetCalendarValue</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_GetCalendarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarTime
</UL>

<P><STRONG><a name="[1c6]"></a>HW_RTC_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, hw_rtc.o(i.HW_RTC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[1cc]"></a>HW_RTC_StartWakeUpAlarm</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, hw_rtc.o(i.HW_RTC_StartWakeUpAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[22c]"></a>__NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sleep_set
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_reset_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fdr1_run
</UL>

<P><STRONG><a name="[247]"></a>__NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxPayLoadDeal
</UL>

<P><STRONG><a name="[1fc]"></a>CalendarDiv60</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, time_server.o(i.CalendarDiv60))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CalendarDiv60
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeLocalTime
</UL>

<P><STRONG><a name="[20c]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, time_server.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[20d]"></a>TimerSetTimeout</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, time_server.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[24a]"></a>tiny_vfscanf</STRONG> (Thumb, 592 bytes, Stack size 608 bytes, tiny_sscanf.o(i.tiny_vfscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>

<P><STRONG><a name="[125]"></a>ADC_DelayMicroSecond</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.ADC_DelayMicroSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[126]"></a>ADC_Enable</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[1d4]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[1d3]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32l0xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
</UL>

<P><STRONG><a name="[182]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[184]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[17c]"></a>I2C_TransferConfig</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, stm32l0xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[17b]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[17d]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[17e]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[180]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[15d]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32l0xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[172]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32l0xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[18a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[27]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[2a]"></a>UART_DMAError</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[28]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[29]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[1a6]"></a>UART_EndRxTransfer</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[210]"></a>UART_EndTxTransfer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[2f]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[2e]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[fd]"></a>_isoweek</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _isoweek &rArr; _yeardays &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[fe]"></a>_yeardays</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _yeardays &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[21f]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21d]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[222]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[221]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[31]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
